/*
숫자나라 기사단의 각 기사에게는 1번부터 number까지 번호가 지정되어 있습니다. 기사들은 무기점에서 무기를 구매하려고 합니다.

각 기사는 자신의 기사 번호의 약수 개수에 해당하는 공격력을 가진 무기를 구매하려 합니다. 단, 이웃나라와의 협약에 의해 공격력의 제한수치를 정하고, 제한수치보다 큰 공격력을 가진 무기를 구매해야 하는 기사는 협약기관에서 정한 공격력을 가지는 무기를 구매해야 합니다.

예를 들어, 15번으로 지정된 기사단원은 15의 약수가 1, 3, 5, 15로 4개 이므로, 공격력이 4인 무기를 구매합니다. 만약, 이웃나라와의 협약으로 정해진 공격력의 제한수치가 3이고 제한수치를 초과한 기사가 사용할 무기의 공격력이 2라면, 15번으로 지정된 기사단원은 무기점에서 공격력이 2인 무기를 구매합니다. 무기를 만들 때, 무기의 공격력 1당 1kg의 철이 필요합니다. 그래서 무기점에서 무기를 모두 만들기 위해 필요한 철의 무게를 미리 계산하려 합니다.

기사단원의 수를 나타내는 정수 number와 이웃나라와 협약으로 정해진 공격력의 제한수치를 나타내는 정수 limit와 제한수치를 초과한 기사가 사용할 무기의 공격력을 나타내는 정수 power가 주어졌을 때, 무기점의 주인이 무기를 모두 만들기 위해 필요한 철의 무게를 return 하는 solution 함수를 완성하시오.
 */

// 1번째 풀이 법

// function solution(number, limit, power) {
//     let answer = 0;
//     let knights = [];
//     for (let i = 1 ; i <= number ; i ++){
//         knights.push(countDivisors(i))
//     }
//     knights.map((el,idx)=> el > limit ? knights[idx] = power : el)

//     return knights.reduce((a,b) => a+b,0);
// }

// function countDivisors(n) {
//   let count = 0;
//   for (let i = 1; i <= n; i++) {
//     if (n % i === 0) {
//       count++;
//     }
//   }
//   return count;
// }

//2번째 풀이법

type result = (a: number, b: number, c: number) => number;

const solution16: result = (n, limit, power) => {
  let answer = 0;
  for (let i = 1; i <= n; i++) {
    answer += countDivisors(i, limit, power);
  }
  return answer;
};

const countDivisors: result = (n, l, p) => {
  let c = 0;
  for (let i = 1; i <= n / 2; i++) {
    if (n % i === 0) {
      c++;
    }
  }
  return c + 1 > l ? p : c + 1;
};

/*
기억하고 싶은 이유: 

후...진짜..문제를 푸는 것 자체는 어렵지 않다..

근데..프로그래머스에서 원하는 답을 찾는 데 까지 오래 걸린다. 시간복잡도를 계산 할 줄 모르니 어디에서 줄여나가야 할지 감이 오지 않는다.

최대한 for 문을 줄이고 줄이다 보니..최후의 답안에서 결말을 찾았다.

1번째 풀이법과 2번째 풀이법을 비교해보자.

1. map 메서드로 실행 해 주었던 기사의 공격력이 제한 수치를 넘을 경우 협약기관에서 정한 공격력을 반환해주는 것을 다른 함수로 따로 빼서 약수의 개수를 찾음과 동시에 진행을 시켰다.

2. reduce 메서드로 배열 안에 기사의 무기 공격력을 넣어놓고 다 더한 것을 1번의 방법으로 실행하자 마자 다 나오는 결과대로 더할 수 있도록 바꿔 주었다.

3. 약수의 개수 찾는 법 줄이기.. n의 약수를 찾을 때 솔직히 n 번 돌 필요가 없다..자기 자신을 제외한 약수는 자기 자신의 절반보다 클 수가 없기 때문이다..그래서 딱 절반으로 줄여줬더니..통과가 되었다..

앞으로 꼭!!! 시간 복잡도를 생각하면서 문제를 풀어나가자.

*/
